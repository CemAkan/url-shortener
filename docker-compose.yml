services:
  app:
    build: .
    image: url-shortener-app
    container_name: url-shortener
    env_file: [.env]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.shortener.rule=Host(`cemakan.com.tr`)"
      - "traefik.http.routers.shortener.entrypoints=websecure"
      - "traefik.http.routers.shortener.tls.certresolver=letsencrypt"
      - "traefik.http.services.shortener.loadbalancer.server.port=3000"
    networks: [internal, proxy]
    depends_on:
      postgres: {condition: service_healthy}
      redis:    {condition: service_healthy}

  postgres:
    image: postgres:16-alpine
    container_name: pg-shortener
    env_file: [.env]
    volumes: [pgdata:/var/lib/postgresql/data]
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      retries: 10
    networks: [internal]

  redis:
    image: redis:7-alpine
    container_name: redis-shortener
    volumes: [redisdata:/data]
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 5s
      retries: 10
    networks: [internal]

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules.yml:/etc/prometheus/rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
    ports: ["${PROMETHEUS_PORT:-9090}:9090"]
    networks: [internal]

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    volumes:
      - ./prometheus/generated/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    ports: ["9093:9093"]
    networks: [internal]

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter
    env_file: [.env]
    environment:
      PG_EXPORTER_DISABLE_SETTINGS_METRICS: "true"
    ports: ["9187:9187"]
    depends_on:
      postgres: {condition: service_healthy}
    networks: [internal]

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    env_file: [.env]
    volumes:
      - grafana_data:/var/lib/grafana
    ports: ["${GRAFANA_PORT:-3001}:3000"]
    depends_on: [prometheus]
    networks: [internal, proxy]

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    network_mode: host
    pid: host
    restart: unless-stopped

networks:
  internal:
  proxy:
    external: true

volumes:
  pgdata:
  redisdata:
  prometheus_data:
  grafana_data: